package com.wincom.mstar.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class BEnergyMinuteExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public BEnergyMinuteExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andAreaidIsNull() {
            addCriterion("AreaId is null");
            return (Criteria) this;
        }

        public Criteria andAreaidIsNotNull() {
            addCriterion("AreaId is not null");
            return (Criteria) this;
        }

        public Criteria andAreaidEqualTo(Integer value) {
            addCriterion("AreaId =", value, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidNotEqualTo(Integer value) {
            addCriterion("AreaId <>", value, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidGreaterThan(Integer value) {
            addCriterion("AreaId >", value, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidGreaterThanOrEqualTo(Integer value) {
            addCriterion("AreaId >=", value, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidLessThan(Integer value) {
            addCriterion("AreaId <", value, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidLessThanOrEqualTo(Integer value) {
            addCriterion("AreaId <=", value, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidIn(List<Integer> values) {
            addCriterion("AreaId in", values, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidNotIn(List<Integer> values) {
            addCriterion("AreaId not in", values, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidBetween(Integer value1, Integer value2) {
            addCriterion("AreaId between", value1, value2, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreaidNotBetween(Integer value1, Integer value2) {
            addCriterion("AreaId not between", value1, value2, "areaid");
            return (Criteria) this;
        }

        public Criteria andAreatypeIsNull() {
            addCriterion("AreaType is null");
            return (Criteria) this;
        }

        public Criteria andAreatypeIsNotNull() {
            addCriterion("AreaType is not null");
            return (Criteria) this;
        }

        public Criteria andAreatypeEqualTo(Integer value) {
            addCriterion("AreaType =", value, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeNotEqualTo(Integer value) {
            addCriterion("AreaType <>", value, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeGreaterThan(Integer value) {
            addCriterion("AreaType >", value, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("AreaType >=", value, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeLessThan(Integer value) {
            addCriterion("AreaType <", value, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeLessThanOrEqualTo(Integer value) {
            addCriterion("AreaType <=", value, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeIn(List<Integer> values) {
            addCriterion("AreaType in", values, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeNotIn(List<Integer> values) {
            addCriterion("AreaType not in", values, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeBetween(Integer value1, Integer value2) {
            addCriterion("AreaType between", value1, value2, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreatypeNotBetween(Integer value1, Integer value2) {
            addCriterion("AreaType not between", value1, value2, "areatype");
            return (Criteria) this;
        }

        public Criteria andAreanameIsNull() {
            addCriterion("AreaName is null");
            return (Criteria) this;
        }

        public Criteria andAreanameIsNotNull() {
            addCriterion("AreaName is not null");
            return (Criteria) this;
        }

        public Criteria andAreanameEqualTo(String value) {
            addCriterion("AreaName =", value, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameNotEqualTo(String value) {
            addCriterion("AreaName <>", value, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameGreaterThan(String value) {
            addCriterion("AreaName >", value, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameGreaterThanOrEqualTo(String value) {
            addCriterion("AreaName >=", value, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameLessThan(String value) {
            addCriterion("AreaName <", value, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameLessThanOrEqualTo(String value) {
            addCriterion("AreaName <=", value, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameLike(String value) {
            addCriterion("AreaName like", value, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameNotLike(String value) {
            addCriterion("AreaName not like", value, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameIn(List<String> values) {
            addCriterion("AreaName in", values, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameNotIn(List<String> values) {
            addCriterion("AreaName not in", values, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameBetween(String value1, String value2) {
            addCriterion("AreaName between", value1, value2, "areaname");
            return (Criteria) this;
        }

        public Criteria andAreanameNotBetween(String value1, String value2) {
            addCriterion("AreaName not between", value1, value2, "areaname");
            return (Criteria) this;
        }

        public Criteria andTotalpowerIsNull() {
            addCriterion("TotalPower is null");
            return (Criteria) this;
        }

        public Criteria andTotalpowerIsNotNull() {
            addCriterion("TotalPower is not null");
            return (Criteria) this;
        }

        public Criteria andTotalpowerEqualTo(Double value) {
            addCriterion("TotalPower =", value, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerNotEqualTo(Double value) {
            addCriterion("TotalPower <>", value, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerGreaterThan(Double value) {
            addCriterion("TotalPower >", value, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerGreaterThanOrEqualTo(Double value) {
            addCriterion("TotalPower >=", value, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerLessThan(Double value) {
            addCriterion("TotalPower <", value, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerLessThanOrEqualTo(Double value) {
            addCriterion("TotalPower <=", value, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerIn(List<Double> values) {
            addCriterion("TotalPower in", values, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerNotIn(List<Double> values) {
            addCriterion("TotalPower not in", values, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerBetween(Double value1, Double value2) {
            addCriterion("TotalPower between", value1, value2, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotalpowerNotBetween(Double value1, Double value2) {
            addCriterion("TotalPower not between", value1, value2, "totalpower");
            return (Criteria) this;
        }

        public Criteria andTotaldiffIsNull() {
            addCriterion("TotalDiff is null");
            return (Criteria) this;
        }

        public Criteria andTotaldiffIsNotNull() {
            addCriterion("TotalDiff is not null");
            return (Criteria) this;
        }

        public Criteria andTotaldiffEqualTo(Double value) {
            addCriterion("TotalDiff =", value, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffNotEqualTo(Double value) {
            addCriterion("TotalDiff <>", value, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffGreaterThan(Double value) {
            addCriterion("TotalDiff >", value, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffGreaterThanOrEqualTo(Double value) {
            addCriterion("TotalDiff >=", value, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffLessThan(Double value) {
            addCriterion("TotalDiff <", value, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffLessThanOrEqualTo(Double value) {
            addCriterion("TotalDiff <=", value, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffIn(List<Double> values) {
            addCriterion("TotalDiff in", values, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffNotIn(List<Double> values) {
            addCriterion("TotalDiff not in", values, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffBetween(Double value1, Double value2) {
            addCriterion("TotalDiff between", value1, value2, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andTotaldiffNotBetween(Double value1, Double value2) {
            addCriterion("TotalDiff not between", value1, value2, "totaldiff");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerIsNull() {
            addCriterion("ItDevlPower is null");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerIsNotNull() {
            addCriterion("ItDevlPower is not null");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerEqualTo(Double value) {
            addCriterion("ItDevlPower =", value, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerNotEqualTo(Double value) {
            addCriterion("ItDevlPower <>", value, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerGreaterThan(Double value) {
            addCriterion("ItDevlPower >", value, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerGreaterThanOrEqualTo(Double value) {
            addCriterion("ItDevlPower >=", value, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerLessThan(Double value) {
            addCriterion("ItDevlPower <", value, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerLessThanOrEqualTo(Double value) {
            addCriterion("ItDevlPower <=", value, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerIn(List<Double> values) {
            addCriterion("ItDevlPower in", values, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerNotIn(List<Double> values) {
            addCriterion("ItDevlPower not in", values, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerBetween(Double value1, Double value2) {
            addCriterion("ItDevlPower between", value1, value2, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevlpowerNotBetween(Double value1, Double value2) {
            addCriterion("ItDevlPower not between", value1, value2, "itdevlpower");
            return (Criteria) this;
        }

        public Criteria andItdevdiffIsNull() {
            addCriterion("ItDevDiff is null");
            return (Criteria) this;
        }

        public Criteria andItdevdiffIsNotNull() {
            addCriterion("ItDevDiff is not null");
            return (Criteria) this;
        }

        public Criteria andItdevdiffEqualTo(Double value) {
            addCriterion("ItDevDiff =", value, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffNotEqualTo(Double value) {
            addCriterion("ItDevDiff <>", value, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffGreaterThan(Double value) {
            addCriterion("ItDevDiff >", value, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffGreaterThanOrEqualTo(Double value) {
            addCriterion("ItDevDiff >=", value, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffLessThan(Double value) {
            addCriterion("ItDevDiff <", value, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffLessThanOrEqualTo(Double value) {
            addCriterion("ItDevDiff <=", value, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffIn(List<Double> values) {
            addCriterion("ItDevDiff in", values, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffNotIn(List<Double> values) {
            addCriterion("ItDevDiff not in", values, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffBetween(Double value1, Double value2) {
            addCriterion("ItDevDiff between", value1, value2, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andItdevdiffNotBetween(Double value1, Double value2) {
            addCriterion("ItDevDiff not between", value1, value2, "itdevdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerIsNull() {
            addCriterion("CoolingPower is null");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerIsNotNull() {
            addCriterion("CoolingPower is not null");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerEqualTo(Double value) {
            addCriterion("CoolingPower =", value, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerNotEqualTo(Double value) {
            addCriterion("CoolingPower <>", value, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerGreaterThan(Double value) {
            addCriterion("CoolingPower >", value, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerGreaterThanOrEqualTo(Double value) {
            addCriterion("CoolingPower >=", value, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerLessThan(Double value) {
            addCriterion("CoolingPower <", value, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerLessThanOrEqualTo(Double value) {
            addCriterion("CoolingPower <=", value, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerIn(List<Double> values) {
            addCriterion("CoolingPower in", values, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerNotIn(List<Double> values) {
            addCriterion("CoolingPower not in", values, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerBetween(Double value1, Double value2) {
            addCriterion("CoolingPower between", value1, value2, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingpowerNotBetween(Double value1, Double value2) {
            addCriterion("CoolingPower not between", value1, value2, "coolingpower");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffIsNull() {
            addCriterion("CoolingDiff is null");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffIsNotNull() {
            addCriterion("CoolingDiff is not null");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffEqualTo(Double value) {
            addCriterion("CoolingDiff =", value, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffNotEqualTo(Double value) {
            addCriterion("CoolingDiff <>", value, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffGreaterThan(Double value) {
            addCriterion("CoolingDiff >", value, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffGreaterThanOrEqualTo(Double value) {
            addCriterion("CoolingDiff >=", value, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffLessThan(Double value) {
            addCriterion("CoolingDiff <", value, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffLessThanOrEqualTo(Double value) {
            addCriterion("CoolingDiff <=", value, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffIn(List<Double> values) {
            addCriterion("CoolingDiff in", values, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffNotIn(List<Double> values) {
            addCriterion("CoolingDiff not in", values, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffBetween(Double value1, Double value2) {
            addCriterion("CoolingDiff between", value1, value2, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andCoolingdiffNotBetween(Double value1, Double value2) {
            addCriterion("CoolingDiff not between", value1, value2, "coolingdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerIsNull() {
            addCriterion("RefrigerationPower is null");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerIsNotNull() {
            addCriterion("RefrigerationPower is not null");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerEqualTo(Double value) {
            addCriterion("RefrigerationPower =", value, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerNotEqualTo(Double value) {
            addCriterion("RefrigerationPower <>", value, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerGreaterThan(Double value) {
            addCriterion("RefrigerationPower >", value, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerGreaterThanOrEqualTo(Double value) {
            addCriterion("RefrigerationPower >=", value, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerLessThan(Double value) {
            addCriterion("RefrigerationPower <", value, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerLessThanOrEqualTo(Double value) {
            addCriterion("RefrigerationPower <=", value, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerIn(List<Double> values) {
            addCriterion("RefrigerationPower in", values, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerNotIn(List<Double> values) {
            addCriterion("RefrigerationPower not in", values, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerBetween(Double value1, Double value2) {
            addCriterion("RefrigerationPower between", value1, value2, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationpowerNotBetween(Double value1, Double value2) {
            addCriterion("RefrigerationPower not between", value1, value2, "refrigerationpower");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffIsNull() {
            addCriterion("RefrigerationDiff is null");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffIsNotNull() {
            addCriterion("RefrigerationDiff is not null");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffEqualTo(Double value) {
            addCriterion("RefrigerationDiff =", value, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffNotEqualTo(Double value) {
            addCriterion("RefrigerationDiff <>", value, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffGreaterThan(Double value) {
            addCriterion("RefrigerationDiff >", value, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffGreaterThanOrEqualTo(Double value) {
            addCriterion("RefrigerationDiff >=", value, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffLessThan(Double value) {
            addCriterion("RefrigerationDiff <", value, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffLessThanOrEqualTo(Double value) {
            addCriterion("RefrigerationDiff <=", value, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffIn(List<Double> values) {
            addCriterion("RefrigerationDiff in", values, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffNotIn(List<Double> values) {
            addCriterion("RefrigerationDiff not in", values, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffBetween(Double value1, Double value2) {
            addCriterion("RefrigerationDiff between", value1, value2, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andRefrigerationdiffNotBetween(Double value1, Double value2) {
            addCriterion("RefrigerationDiff not between", value1, value2, "refrigerationdiff");
            return (Criteria) this;
        }

        public Criteria andLightingpowerIsNull() {
            addCriterion("LightingPower is null");
            return (Criteria) this;
        }

        public Criteria andLightingpowerIsNotNull() {
            addCriterion("LightingPower is not null");
            return (Criteria) this;
        }

        public Criteria andLightingpowerEqualTo(Double value) {
            addCriterion("LightingPower =", value, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerNotEqualTo(Double value) {
            addCriterion("LightingPower <>", value, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerGreaterThan(Double value) {
            addCriterion("LightingPower >", value, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerGreaterThanOrEqualTo(Double value) {
            addCriterion("LightingPower >=", value, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerLessThan(Double value) {
            addCriterion("LightingPower <", value, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerLessThanOrEqualTo(Double value) {
            addCriterion("LightingPower <=", value, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerIn(List<Double> values) {
            addCriterion("LightingPower in", values, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerNotIn(List<Double> values) {
            addCriterion("LightingPower not in", values, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerBetween(Double value1, Double value2) {
            addCriterion("LightingPower between", value1, value2, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingpowerNotBetween(Double value1, Double value2) {
            addCriterion("LightingPower not between", value1, value2, "lightingpower");
            return (Criteria) this;
        }

        public Criteria andLightingdiffIsNull() {
            addCriterion("LightingDiff is null");
            return (Criteria) this;
        }

        public Criteria andLightingdiffIsNotNull() {
            addCriterion("LightingDiff is not null");
            return (Criteria) this;
        }

        public Criteria andLightingdiffEqualTo(Double value) {
            addCriterion("LightingDiff =", value, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffNotEqualTo(Double value) {
            addCriterion("LightingDiff <>", value, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffGreaterThan(Double value) {
            addCriterion("LightingDiff >", value, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffGreaterThanOrEqualTo(Double value) {
            addCriterion("LightingDiff >=", value, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffLessThan(Double value) {
            addCriterion("LightingDiff <", value, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffLessThanOrEqualTo(Double value) {
            addCriterion("LightingDiff <=", value, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffIn(List<Double> values) {
            addCriterion("LightingDiff in", values, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffNotIn(List<Double> values) {
            addCriterion("LightingDiff not in", values, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffBetween(Double value1, Double value2) {
            addCriterion("LightingDiff between", value1, value2, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andLightingdiffNotBetween(Double value1, Double value2) {
            addCriterion("LightingDiff not between", value1, value2, "lightingdiff");
            return (Criteria) this;
        }

        public Criteria andOtherpowerIsNull() {
            addCriterion("OtherPower is null");
            return (Criteria) this;
        }

        public Criteria andOtherpowerIsNotNull() {
            addCriterion("OtherPower is not null");
            return (Criteria) this;
        }

        public Criteria andOtherpowerEqualTo(Double value) {
            addCriterion("OtherPower =", value, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerNotEqualTo(Double value) {
            addCriterion("OtherPower <>", value, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerGreaterThan(Double value) {
            addCriterion("OtherPower >", value, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerGreaterThanOrEqualTo(Double value) {
            addCriterion("OtherPower >=", value, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerLessThan(Double value) {
            addCriterion("OtherPower <", value, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerLessThanOrEqualTo(Double value) {
            addCriterion("OtherPower <=", value, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerIn(List<Double> values) {
            addCriterion("OtherPower in", values, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerNotIn(List<Double> values) {
            addCriterion("OtherPower not in", values, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerBetween(Double value1, Double value2) {
            addCriterion("OtherPower between", value1, value2, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherpowerNotBetween(Double value1, Double value2) {
            addCriterion("OtherPower not between", value1, value2, "otherpower");
            return (Criteria) this;
        }

        public Criteria andOtherdiffIsNull() {
            addCriterion("OtherDiff is null");
            return (Criteria) this;
        }

        public Criteria andOtherdiffIsNotNull() {
            addCriterion("OtherDiff is not null");
            return (Criteria) this;
        }

        public Criteria andOtherdiffEqualTo(Double value) {
            addCriterion("OtherDiff =", value, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffNotEqualTo(Double value) {
            addCriterion("OtherDiff <>", value, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffGreaterThan(Double value) {
            addCriterion("OtherDiff >", value, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffGreaterThanOrEqualTo(Double value) {
            addCriterion("OtherDiff >=", value, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffLessThan(Double value) {
            addCriterion("OtherDiff <", value, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffLessThanOrEqualTo(Double value) {
            addCriterion("OtherDiff <=", value, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffIn(List<Double> values) {
            addCriterion("OtherDiff in", values, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffNotIn(List<Double> values) {
            addCriterion("OtherDiff not in", values, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffBetween(Double value1, Double value2) {
            addCriterion("OtherDiff between", value1, value2, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andOtherdiffNotBetween(Double value1, Double value2) {
            addCriterion("OtherDiff not between", value1, value2, "otherdiff");
            return (Criteria) this;
        }

        public Criteria andPueIsNull() {
            addCriterion("PUE is null");
            return (Criteria) this;
        }

        public Criteria andPueIsNotNull() {
            addCriterion("PUE is not null");
            return (Criteria) this;
        }

        public Criteria andPueEqualTo(Double value) {
            addCriterion("PUE =", value, "pue");
            return (Criteria) this;
        }

        public Criteria andPueNotEqualTo(Double value) {
            addCriterion("PUE <>", value, "pue");
            return (Criteria) this;
        }

        public Criteria andPueGreaterThan(Double value) {
            addCriterion("PUE >", value, "pue");
            return (Criteria) this;
        }

        public Criteria andPueGreaterThanOrEqualTo(Double value) {
            addCriterion("PUE >=", value, "pue");
            return (Criteria) this;
        }

        public Criteria andPueLessThan(Double value) {
            addCriterion("PUE <", value, "pue");
            return (Criteria) this;
        }

        public Criteria andPueLessThanOrEqualTo(Double value) {
            addCriterion("PUE <=", value, "pue");
            return (Criteria) this;
        }

        public Criteria andPueIn(List<Double> values) {
            addCriterion("PUE in", values, "pue");
            return (Criteria) this;
        }

        public Criteria andPueNotIn(List<Double> values) {
            addCriterion("PUE not in", values, "pue");
            return (Criteria) this;
        }

        public Criteria andPueBetween(Double value1, Double value2) {
            addCriterion("PUE between", value1, value2, "pue");
            return (Criteria) this;
        }

        public Criteria andPueNotBetween(Double value1, Double value2) {
            addCriterion("PUE not between", value1, value2, "pue");
            return (Criteria) this;
        }

        public Criteria andRecordtimeIsNull() {
            addCriterion("RecordTime is null");
            return (Criteria) this;
        }

        public Criteria andRecordtimeIsNotNull() {
            addCriterion("RecordTime is not null");
            return (Criteria) this;
        }

        public Criteria andRecordtimeEqualTo(Date value) {
            addCriterion("RecordTime =", value, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeNotEqualTo(Date value) {
            addCriterion("RecordTime <>", value, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeGreaterThan(Date value) {
            addCriterion("RecordTime >", value, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeGreaterThanOrEqualTo(Date value) {
            addCriterion("RecordTime >=", value, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeLessThan(Date value) {
            addCriterion("RecordTime <", value, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeLessThanOrEqualTo(Date value) {
            addCriterion("RecordTime <=", value, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeIn(List<Date> values) {
            addCriterion("RecordTime in", values, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeNotIn(List<Date> values) {
            addCriterion("RecordTime not in", values, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeBetween(Date value1, Date value2) {
            addCriterion("RecordTime between", value1, value2, "recordtime");
            return (Criteria) this;
        }

        public Criteria andRecordtimeNotBetween(Date value1, Date value2) {
            addCriterion("RecordTime not between", value1, value2, "recordtime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated do_not_delete_during_merge Thu Mar 02 11:23:21 CST 2017
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Energy.dbo.BEnergyMinute
     *
     * @mbggenerated Thu Mar 02 11:23:21 CST 2017
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}